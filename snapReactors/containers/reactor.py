
""" Reactor

A container made to store reactor state container data and provide nominal 
attributes to the reactor design.

Created on 2022-02-10 6:52:00 @author: Isaac Naupa, Sam Garcia
Last updated on 2022-02-11 12:17:13 @author: Sam Garcia
email: iaguirre6@gatech.edu, sgarcia9@wisc.edu
"""

from snapReactors.functions.checkerrors import (_isstr, _isarray,
    _explengtharray, _isnonnegativearray, _isnumber, _isnonnegative,
    _isinstanceList) 
from snapReactors.functions.parameters import ALLOWED_PROPERTIES
from snapReactors.functions.warnings import InputFileSyntaxWarning
from enum import Enum
from snapReactors.containers.reactorstate import ReactorState
from snapReactors.containers.materials import Material, CTYPE, UTYPE
from snapReactors.containers.property import Property, DTYPE, VTYPE 
import numpy as np

class LTYPE(Enum):
    """An Enum to describe all options for a core lattice assembly type.
    """
    HEX = 1
    SQUARE = 1

class Reactor:
    """ A container to store reactor state data and store nominal attributes
    of reactor design

    Attributes
    ----------
    id : str
        name of reactor 
    ltype : Enum.LTYPE
        assembly lattice type i.e. Hex or Square
    rodNum : non-negative scalar
        number of fuel channels in assemblies
    guideNum : non-negative scalar
        number of guide tubes in assembly
    instrumNum : non-negative scalar
        number of instrument rods in assembly
    thermalPower :  non-negative scalar
        nominal thermal power generated by core at typical operating 
        conditions
    electricPower : non-negative scalar
        nominal electric power generated by reactor at typical operating
        conditions
    coolant : str
        name of coolant material used in core
    moderator : str
        name of moderator material used in core
    description : str or None
        description of reactor design and its purpose
    _reactorstates : list, var or None
        list of reactor states of instance type ReactorState

    Methods
    -------
    addReactorState : add data for a specific reactor state

    Raises
    ------
    TyperError
        If ``id``, ``coolant``, ``moderator``, ``description`` is not str.
        If ``_reactorstates`` is not list or variable of instance type 
        ReactorState
    ValueError    
        If ``rodNum``, ``guideNum``, ``instrumNum``, ``thermalPower``, 
        ``electricPower`` are not non-negative scalar
    KeyError
        If ``ltype`` is not within Enum.LTYPE

    Examples
    --------
    >>> from snapReactors.containers.reactor import Reactor
    >>> from snapReactors.containers.reactorstate import ReactorState
    >>> from snapReactors.containers.component import Component
    >>> from snapReactors.containers.materials import Material

    >>> c1 = Component("c1")
    >>> c1.addMaterial(Material.readData('material_data.txt'))
    >>> reference = NA-SR-XXXX
    >>> description = 'Operating temperature and pressure are at cold start' 
                        'conditions'
    >>> rs1 = ReactorState('Cold Power', reference=reference, 
                            description=description, _components=c1)
    >>> SNAP4 = Reactor(id = 'SNAP4', ltype = 'HEX', rodnum=583, guideNum=0,
                        instrumNum=0, thermalPower=12, electricPower=2,
                        coolant = 'Water', moderator = 'Water',
                        _reactorstates=rs1)
    """
    def __init__(self, id, ltype, rodNum, guideNum, instrumNum, thermalPower, 
                electricPower, coolant, moderator, description=None, 
                _reactorstates=None):
        _isstr(id, "Reactor Experiment Name")
        _isstr(coolant, "Coolant Material")
        _isstr(moderator, "Moderating Material")

        _isnonnegative(rodNum, "Number of fuel rods")
        _isnonnegative(guideNum, "Number of guide tubes")
        _isnonnegative(instrumNum, "Number of instrumentation rods")
        _isnonnegative(thermalPower, "Nominal thermal power output")
        _isnonnegative(electricPower, "Nominal electric power output")
        if description != None:
            _isstr(description, "Description of Reactor Experiment")

        if ltype not in LTYPE.__members__:
            raise KeyError("Assembly Lattice Type {} is not an allowed"
                           "type: {}".format(ltype, LTYPE._member_names_))
        
        if _reactorstates !=None:    
            if isinstance(_reactorstates, list):
                _isinstanceList(_reactorstates, ReactorState, "List of "
                 "reactor states")
            else:
                if not isinstance(_reactorstates, ReactorState):
                    raise TypeError("Reactor States must be of type "
                     "ReactorState and not {}".format(type(_reactorstates)))
        self.id = id
        self.ltype = LTYPE[ltype]
        self.rodNum = rodNum
        self.guideNum = guideNum
        self.instrumNum = instrumNum
        self.thermalPower = thermalPower
        self.electricPower = electricPower
        self.coolant = coolant
        self.moderator = moderator
        self.description = description
        self._reactorstates = []
        if not isinstance(_reactorstates, type(None)):
            if isinstance(_reactorstates, list):
                for i in _reactorstates:
                    self._reactorstates.append(i)
            else:
                self._reactorstates.append(_reactorstates)

    
    def addReactorStates(self, _reactorstates):
        """Add data for a specific reactor state
        
        Parameters
        ----------
        _components : list or variable of instance type Component
        
        Raises
        -------
        TypeError
            If ``_components`` is not a list or variable of instance type
            Component

        Examples
        --------
        >>> from snapReactors.containers.component import Component
        >>> from snapReactors.containers.materials import Material

        >>> c1 = Component("c1")
        >>> c1.addMaterial(Material.readData('material_data.txt'))
        >>> reference = NA-SR-XXXX
        >>> description = 'Operating temperature and pressure are at cold start' 
                        'conditions'
        >>> rs1 = ReactorState('Cold Power', reference=reference, 
                            description=description, _components=None)  
        >>> rs1.addComponent(c1) 
        """
        if isinstance(_reactorstates, list):
            _isinstanceList(_reactorstates, ReactorState, "List of reactor "
            "states")
        else:
            if not isinstance(_reactorstates, ReactorState):
                raise TypeError("Reactor states must be of type ReactorState"
                    " and not {}".format(type(_reactorstates)))
        if isinstance(_reactorstates, list):
            for i in _reactorstates:
                self._reactorstates.append(i)
        else:
            self._reactorstates.append(_reactorstates)
    
    def __eq__(self, other):
        if not isinstance(other, Reactor):
            # don't attempt to compare against unrelated types
            return False
        return (self.id == other.id and self.ltype == other.ltype  
                and self.rodNum == other.rodNum and 
                self.guideNum == other.guideNum and 
                self.instrumNum == other.instrumNum and
                self.thermalPower == other.thermalPower and
                self.electricPower == other.electricPower and
                self.coolant == other.coolant and 
                self.moderator == other.moderator and
                self.description == other.description and
                self._reactorstates == other._reactorstates)

    def __hash__(self):
        # necessary for instances to behave sanely in dicts and sets.
        return hash((self.id, self.ltype, self.rodNum, self.guideNum,
                     self.instrumNum, self.thermalPower, self.electricPower,
                     self.coolant, self.moderator, self.description,
                      self._reactorstates))
